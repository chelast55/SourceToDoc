- converter:
    help: The converter to use to convert comments
    nargs: "?"
    const: "default"
    type: str
    short: CC
- cc_replace:
    help: |
      The method to replace comments.
      "replace": Replace old comment with new comment.
      "append": Append new comment block after the old comment block.
      "inline": In the new comment block: Prepend the content of the old comment before the new comment content.
    type: str
    choices:
      - replace
      - append
      - inline
    default: replace
- cc_style:
    help: Specifies the comment style to convert into
    type: str
- cc_only_after_member:
    help: If set, only consider single line comments after members
    type: bool
- cc_openai_base_url:
    help: base_url for the OpenAI API
    type: str
- cc_openai_api_key:
    help: api_key for the OpenAI API
    type: str
- cc_llm_model:
    help: The LLM model to use with the OpenAI API
    type: str
- cc_c_system_prompt:
    help: System prompt for comments found in C source files.
    type: str
    default: "You are a coder that converts comments on C functions to doxygen style comments that start with \"/**\" without changing the text."
- cc_c_user_prompt_template:
    help: |
        Template (Python format string) of user prompts for comments found in C source files.
        The comments will be inserted in the rquired {} placeholder. Use {{ or }} to use { or } literally.
    type: str
    default: "{}"
- cc_cxx_system_prompt:
    help: System prompt for comments found in C++ source files.
    type: str
    default: You are a coder that converts comments on C++ functions to doxygen style comments that start with "/**" without changing the text.
- cc_cxx_user_prompt_template:
    help: |
        Template (Python format string) of user prompts for comments found in C++ source files.
        The comments will be inserted in the required {} placeholder. Use {{ or }} to use { or } literally.
    type: str
    default: "{}"
- cc_command_style:
    help: The Doxygen command style to convert into
    type: str
    choices:
      - default
      - javadoc
- cc_find:
    help: Python RegEx to find substrings
    type: str
- cc_substitution:
    help: Substitution for substrings found by --find
    type: str
- cc_c_regex:
    help: The Python RegEx to find C source files, by default r".*\.[ch]". It has precedence over --cxx_regex.
    type: str
- cc_cxx_regex:
    help: The Python RegEx to find C++ files, by default r".*\.(c(pp|xx|c)|h(pp|xx|h)?)"
    type: str
